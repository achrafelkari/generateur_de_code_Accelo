#include <Arduino.h>
#include "runner.h"
#include "io.h"
#include <PS2Keyboard.h>
//https://www.pjrc.com/teensy/td_libs_PS2Keyboard.html
#include <Wire.h>


#define  LOG_WA_

#define KEY_ENTER			13

#define _PS2_F1				246
#define _PS2_F2				247
#define _PS2_F3				248
#define _PS2_F4				249
#define _PS2_F5				250
#define _PS2_F6				251
#define _PS2_F7				252
#define _PS2_F8				253
#define _PS2_F9				254
#define _PS2_F10			255

const PROGMEM PS2Keymap_t MyKeymap_French =
		{
		// without shift
				{ 0, _PS2_F9, 0, _PS2_F5, _PS2_F3, _PS2_F1, _PS2_F2, PS2_F12, 0,
				_PS2_F10, _PS2_F8, _PS2_F6, _PS2_F4, PS2_TAB,
				PS2_SUPERSCRIPT_TWO, 0, 0, 0 /*Lalt*/, 0 /*Lshift*/, 0,
						0 /*Lctrl*/, 'a', '&', 0, 0, 0, 'w', 's', 'q', 'z',
						PS2_e_ACUTE, 0, 0, 'c', 'x', 'd', 'e', '\'', '"', 0, 0,
						' ', 'v', 'f', 't', 'r', '(', 0, 0, 'n', 'b', 'h', 'g',
						'y', '-', 0, 0, 0, ',', 'j', 'u', PS2_e_GRAVE, '_', 0,
						0, ';', 'k', 'i', 'o', PS2_a_GRAVE, PS2_c_CEDILLA, 0, 0,
						':', '!', 'l', 'm', 'p', ')', 0, 0, 0, PS2_u_GRAVE, 0,
						'^', '=', 0, 0, 0 /*CapsLock*/, 0 /*Rshift*/,
						PS2_ENTER /*Enter*/, '$', 0, '*', 0, 0, 0, '<', 0, 0, 0,
						0, PS2_BACKSPACE, 0, 0, '1', 0, '4', '7', 0, 0, 0, '0',
						'.', '2', '5', '6', '8', PS2_ESC, 0 /*NumLock*/,
						PS2_F11, '+', '3', '-', '*', '9', PS2_SCROLL, 0, 0, 0,
						0, _PS2_F7 },
				// with shift
				{ 0, PS2_F9, 0, PS2_F5, PS2_F3, PS2_F1, PS2_F2, PS2_F12, 0,
				PS2_F10, PS2_F8, PS2_F6, PS2_F4, PS2_TAB, 0, 0, 0, 0 /*Lalt*/,
						0 /*Lshift*/, 0, 0 /*Lctrl*/, 'A', '1', 0, 0, 0, 'W',
						'S', 'Q', 'Z', '2', 0, 0, 'C', 'X', 'D', 'E', '4', '3',
						0, 0, ' ', 'V', 'F', 'T', 'R', '5', 0, 0, 'N', 'B', 'H',
						'G', 'Y', '6', 0, 0, 0, '?', 'J', 'U', '7', '8', 0, 0,
						'.', 'K', 'I', 'O', '0', '9', 0, 0, '/',
						PS2_SECTION_SIGN, 'L', 'M', 'P', PS2_DEGREE_SIGN, 0, 0,
						0, '%', 0, PS2_DIAERESIS, '+', 0, 0, 0 /*CapsLock*/,
						0 /*Rshift*/, PS2_ENTER /*Enter*/, PS2_POUND_SIGN, 0,
						PS2_MICRO_SIGN, 0, 0, 0, '>', 0, 0, 0, 0, PS2_BACKSPACE,
						0, 0, '1', 0, '4', '7', 0, 0, 0, '0', '.', '2', '5',
						'6', '8', PS2_ESC, 0 /*NumLock*/,
						PS2_F11, '+', '3', '-', '*', '9', PS2_SCROLL, 0, 0, 0,
						0, PS2_F7 }, 1,
				// with altgr
				{ 0, PS2_F9, 0, PS2_F5, PS2_F3, PS2_F1, PS2_F2, PS2_F12, 0,
				PS2_F10, PS2_F8, PS2_F6, PS2_F4, PS2_TAB, 0, 0, 0, 0 /*Lalt*/,
						0 /*Lshift*/, 0, 0 /*Lctrl*/, '@', 0, 0, 0, 0, 0, 0, 0,
						0, '~', 0, 0, 0, 0, 0, 0 /*PS2_EURO_SIGN*/, '{', '#', 0,
						0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '|', 0, 0,
						0, 0, 0, 0, '`', '\\', 0, 0, 0, 0, 0, 0, '@', '^', 0, 0,
						0, 0, 0, 0, 0, ']', 0, 0, 0, 0, 0, 0, 0, '}', 0,
						0 /*CapsLock*/, 0 /*Rshift*/, PS2_ENTER /*Enter*/,
						'¤', 0, '#', 0, 0, 0, '|', 0, 0, 0, 0, PS2_BACKSPACE,
						0, 0, '1', 0, '4', '7', 0, 0, 0, '0', '.', '2', '5',
						'6', '8', PS2_ESC, 0 /*NumLock*/,
						PS2_F11, '+', '3', '-', '*', '9', PS2_SCROLL, 0, 0, 0,
						0, PS2_F7 } };

/*
 #include "FirstBlinkSm.h"
 #include "SecondBlinkSm.h"

 */
#define CMD_SIZE 50
#define CMD_LEN CMD_SIZE - 1
boolean cmd_state = false;

char cmd_buffer[CMD_SIZE];

PS2Keyboard keyboard;

//int index = 0;
int cmd_index = 0;
boolean function_key = false;
boolean function_value = false;


int freeRam() {
	extern int __heap_start, *__brkval;
	int v;
	return (int) &v - (__brkval == 0 ? (int) &__heap_start : (int) __brkval);
}

void getRam(char* cmd, boolean lcd) {
#ifdef LOG_WA_
	char c[] = "                         ";
	if (lcd) {
		sprintf(c, "%d", freeRam());
	} else {
		sprintf(c, "freeRam=%d", freeRam());
	}
#endif
}




void setup() {

// Generated by Acceleo !! Penser � cr�er les configurations de votre programme ! 

	pinMode(8, OUTPUT);
    pinMode(9, OUTPUT);
    pinMode(10, OUTPUT);
    pinMode(11, OUTPUT);
	

	//pinMode(MOTOR, OUTPUT);
	pinMode(OUT3, OUTPUT);

	CONSOLE.begin(9600);
	CONSOLE.println(F("setup 0"));

	getRam(NULL, false);

	keyboard.begin(KBD_DATA, KBD_CLOCK, MyKeymap_French);
	
	pinMode(CHP, OUTPUT);
	pinMode(RST, OUTPUT);
//pinMode(LED, OUTPUT);

	//ESP.begin(ESP_BAUDS);
	/*
	 */
	CONSOLE.println(F("setup 1"));
	getRam(NULL, false);

	init_io();
	StateMachine_setup();
}

void clear_cmd_buffer() {
	for (int j = 0; j < CMD_SIZE; j++) {
		cmd_buffer[j] = 0;
	}
	cmd_index = 0;
}

void cmd_insert(char c) {
	if (cmd_index < CMD_LEN)
		cmd_buffer[cmd_index++] = c;
}

unsigned long cm = 0;





void loop() { // ca boucle � l'infini

#ifdef CONSOLE_PARSER


	char c = 0; // on donne le char 0
	function_value = false; // le function value sert a entrer dans la condition d'apr�s !

	if (keyboard.available()) { // ici on prend une commande depuis le clavier et on l'affiche dans le lcd !

		c = keyboard.read();
		unsigned int k = c;
		if (k > 65461) {
			function_key = true;
		}
		if (function_key) {
			function_key = false;
			if (k != 65475) {
				function_value = true;
				char m[4];
				int fk = k - 65461;
				input_kb(fk);             // c'est ici que opp�re le truc ! on met les variables � true si le num�ro correspond !
				sprintf(m, "F%d", fk);
				Serial.println(fk);
				cm++;
	//if (cm % 10L == 0) {
				StateMachine_loop();
	//}

			}
		}
	}

	//lcd.lcdWrite(c);
	//}


#endif

	
}

