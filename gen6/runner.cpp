#include "runner.h"
#include "io.h"

#define CMD_SIZE 50
#define CMD_LEN CMD_SIZE - 1
#define MAX_MACHINES 15
unsigned long counter_ = 0L;
boolean event_ = false;
int cnt = 0;
int lin = 0;

StateMachine* machines[MAX_MACHINES];
int smIndex = 0;


// generated by acceleo !
	STATE5*  state5;
	STATE1*  state1;
	STATE4*  state4;
	STATE3*  state3;
	STATE6*  state6;
	STATE2*  state2;


void addSm(StateMachine* machine) {
	if (smIndex < MAX_MACHINES - 1)
		machines[smIndex++] = machine;
}

void exec_reset_nu() {
	counter_ = 0;
	event_ = false;
	resetEvents();
}

void StateMachine_setup() { // initialisation des machins d'�tats ! et ajout toutes les machines d'�tat dans la variable machines !

	for (int i=0;i<MAX_MACHINES;i++)
		machines[i] = NULL;

	// generated by acceleo !
		state5 = new STATE5(); 
		addSm(state5);
		state1 = new STATE1(); 
		addSm(state1);
		state4 = new STATE4(); 
		addSm(state4);
		state3 = new STATE3(); 
		addSm(state3);
		state6 = new STATE6(); 
		addSm(state6);
		state2 = new STATE2(); 
		addSm(state2);

}

void begin(){
// generated by acceleo ! 
	state1->tick();

}

void StateMachine_setEvent() {
	event_ = true;
}


void StateMachine_loop() { // cette fonction permet de de commencer l'execution de notre machine d'�tat !

	acquireInputs(); // initialiser les variable ev_master_start et prior_master_start (si ev_master_start = true alors qu'on doit doit executer l'event ! )

// generated by acceleo
	   if(state5->running && !state5->finished){
		  state5->tick();
	    }
	   if(state1->running && !state1->finished){
		  state1->tick();
	    }
	   if(state4->running && !state4->finished){
		  state4->tick();
	    }
	   if(state3->running && !state3->finished){
		  state3->tick();
	    }
	   if(state6->running && !state6->finished){
		  state6->tick();
	    }
	   if(state2->running && !state2->finished){
		  state2->tick();
	    }

	if(
	state5->finished &&
	state1->finished &&
	state4->finished &&
	state3->finished &&
	state6->finished &&
	state2->finished &&
	true){
	begin();
	}

	if (event_)
		counter_++;
	applyOutputs_nu();

	for (int i=0;i<MAX_MACHINES;i++)
		if (machines[i] != NULL)
			machines[i]->endCycle();

	resetEvents();
}

