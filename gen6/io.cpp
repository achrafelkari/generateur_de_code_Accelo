#include <Arduino.h>
#include "runner.h"
#include "io.h"

unsigned long outcount = 0;

 // generated by acceleo 

  /** Les entree sortie : master_startfb_start**/ 
		boolean fb_start = false;
		boolean ev_fb_start=false;
		boolean prior_fb_start = false;
		
		PROGMEM const char s_fb_start[] = "fb_start";
	
  /** Les entree sortie : master_startfb_start**/ 
		boolean master_start = false;
		boolean ev_master_start=false;
		boolean prior_master_start = false;
		
		PROGMEM const char s_master_start[] = "master_start";
	
 // generated by acceleo 

  /** Les entree sortie : sb_startmaster_stop**/ 
		boolean master_stop = false;
		boolean ev_master_stop=false;
		boolean prior_master_stop = false;
		
		PROGMEM const char s_master_stop[] = "master_stop";
	
  /** Les entree sortie : sb_startmaster_stop**/ 
		boolean sb_start = false;
		boolean ev_sb_start=false;
		boolean prior_sb_start = false;
		
		PROGMEM const char s_sb_start[] = "sb_start";
	
 // generated by acceleo 

  /** Les entree sortie : sb_stop**/ 
		boolean sb_stop = false;
		boolean ev_sb_stop=false;
		boolean prior_sb_stop = false;
		
		PROGMEM const char s_sb_stop[] = "sb_stop";
	
 // generated by acceleo 

  /** Les entree sortie : fb_stopm_start**/ 
		boolean m_start = false;
		boolean ev_m_start=false;
		boolean prior_m_start = false;
		
		PROGMEM const char s_m_start[] = "m_start";
	
  /** Les entree sortie : fb_stopm_start**/ 
		boolean fb_stop = false;
		boolean ev_fb_stop=false;
		boolean prior_fb_stop = false;
		
		PROGMEM const char s_fb_stop[] = "fb_stop";
	
 // generated by acceleo 

  /** Les entree sortie : all_startm_stop**/ 
		boolean m_stop = false;
		boolean ev_m_stop=false;
		boolean prior_m_stop = false;
		
		PROGMEM const char s_m_stop[] = "m_stop";
	
  /** Les entree sortie : all_startm_stop**/ 
		boolean all_start = false;
		boolean ev_all_start=false;
		boolean prior_all_start = false;
		
		PROGMEM const char s_all_start[] = "all_start";
	
 // generated by acceleo 

  /** Les entree sortie : all_stop**/ 
		boolean all_stop = false;
		boolean ev_all_stop=false;
		boolean prior_all_stop = false;
		
		PROGMEM const char s_all_stop[] = "all_stop";
	


void resetEvents() {
 // generated by acceleo
	  fb_start = false;
	  master_start = false;
 // generated by acceleo
	  master_stop = false;
	  sb_start = false;
 // generated by acceleo
	  sb_stop = false;
 // generated by acceleo
	  m_start = false;
	  fb_stop = false;
 // generated by acceleo
	  m_stop = false;
	  all_start = false;
 // generated by acceleo
	  all_stop = false;
}

boolean in_ev(boolean v, boolean *p) {
	boolean result = !*p && v;
	*p = v;
	return result;
}

void acquireInputs() {

		in_event(fb_start);
		debug_event(fb_start);
		in_event(master_start);
		debug_event(master_start);
		in_event(master_stop);
		debug_event(master_stop);
		in_event(sb_start);
		debug_event(sb_start);
		in_event(sb_stop);
		debug_event(sb_stop);
		in_event(m_start);
		debug_event(m_start);
		in_event(fb_stop);
		debug_event(fb_stop);
		in_event(m_stop);
		debug_event(m_stop);
		in_event(all_start);
		debug_event(all_start);
		in_event(all_stop);
		debug_event(all_stop);
	
}


void resetInputs_nu() {
  
 // generated by acceleo
		fb_start = false;
		master_start = false;
 // generated by acceleo
		master_stop = false;
		sb_start = false;
 // generated by acceleo
		sb_stop = false;
 // generated by acceleo
		m_start = false;
		fb_stop = false;
 // generated by acceleo
		m_stop = false;
		all_start = false;
 // generated by acceleo
		all_stop = false;

}




void applyOutputs_nu() {
	//TODO extract from command queue ?
}

#ifdef CONSOLE_PARSER


boolean input_kb(int k) { // a changer apres la transformation ! 
	StateMachine_setEvent();
    
// decomenter le code suivant avec votre changement : 


	if (k == 1) // la touche 1 
		master_start = true;
	else if (k==2) // la touche 2
		master_stop = true;

	else if (k==3) // la touche 2
			sb_start = true;
	else if (k==4) // la touche 2
			sb_stop = true;
	else if (k==5) // la touche 2
			fb_start = true;
	else if (k==6) // la touche 2
			fb_stop = true;
	else if (k==9) // la touche 2
			m_start = true;
	else if (k==10) // la touche 2
			m_stop = true;
	else if (k==7) // la touche 2
				all_start = true;
	else if (k==8) // la touche 2
				all_stop = true;
	else
		return false;
	return true;

}

boolean input_cmd_str(char* cmd) {
	//event = true;
	StateMachine_setEvent();


 // generated by acceleo
		if (strstr_P(cmd, s_fb_start) == cmd){
			fb_start=true;
		return true;
		}
		if (strstr_P(cmd, s_master_start) == cmd){
			master_start=true;
		return true;
		}
 // generated by acceleo
		if (strstr_P(cmd, s_master_stop) == cmd){
			master_stop=true;
		return true;
		}
		if (strstr_P(cmd, s_sb_start) == cmd){
			sb_start=true;
		return true;
		}
 // generated by acceleo
		if (strstr_P(cmd, s_sb_stop) == cmd){
			sb_stop=true;
		return true;
		}
 // generated by acceleo
		if (strstr_P(cmd, s_m_start) == cmd){
			m_start=true;
		return true;
		}
		if (strstr_P(cmd, s_fb_stop) == cmd){
			fb_stop=true;
		return true;
		}
 // generated by acceleo
		if (strstr_P(cmd, s_m_stop) == cmd){
			m_stop=true;
		return true;
		}
		if (strstr_P(cmd, s_all_start) == cmd){
			all_start=true;
		return true;
		}
 // generated by acceleo
		if (strstr_P(cmd, s_all_stop) == cmd){
			all_stop=true;
		return true;
		}

  return false;
}

#endif



void out(int outp, boolean value,int i) {
	outcount++;
	digitalWrite(outp, value);
}

void init_io() {
	//out(MOTOR, false);
}

